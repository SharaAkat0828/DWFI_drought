---
title: "Data Collection"
date: "`r Sys.Date()`"
format: html
execute:
  echo: true
---

### ============================================

### Data Collection Script

### This script collects and processes raw data from various sources

### Sources include:

### - USDA Census of Agriculture: Pastureland and cattle inventory data

### - USDA NASS: Hay Production Data

### - USDA NASS: Cattle weights

### - PRISM: Weather Data

### - MACA dataset: Climate Projections

### =============================================

```{r}
# load necessary packages/libraries
pacman::p_load(
  pacman,
  stars, # spatiotemporal data handling
  terra, # raster data handling
  raster, # raster data handling
  sf, # vector data handling
  dplyr, # data wrangling
  tidyverse, 
  fixest,
  usdarnass,
  cubelyr,
  flextable,
  tigris,
  zoo,
  SCI,
  spei,
  purrr,
  datatable,
  ncdf4,
  stringr, # string manipulation
  lubridate, # dates handling
  data.table, # data wrangling
  tidyr, # reshape
  tidyUSDA, # download USDA NASS data
  keyring, # API key management
  FedData, # download Daymet data
  daymetr, # download Daymet data
  ggplot2, # make maps
  tmap, # make maps
  future.apply, # parallel processing
  CropScapeR, # download CDL data
  prism, # download PRISM data
  exactextractr # extract raster values to sf
)
rm(list = ls())

# Setting USDA-NASS key
usdarnass::nass_set_key(key = "79F68508-887F-3423-A3EE-F60AB7DFB3AE")
```

### 1. Retrieve USDA NASS pastureland data from USDA Census of Agriculture

```{r}
#| echo: false

# PASTURE LAND - from PDFs (before 1997)
### NATIONAL
pasture_land_after1997_National <- readxl::read_xlsx('/Users/sharaakat/Dropbox/akat_shara/DWFI_drought/GitHub/Data/Data/pasture_data_after1997_National.xlsx') %>% 
    dplyr::select(., Year, Value) 

pasture_land_after1997_National <- rename(pasture_land_after1997_National, year = Year)
pasture_land_after1997_National <- rename(pasture_land_after1997_National, pastureland_all_types = Value)
pasture_land_after1997_National$year <- as.numeric(as.character(pasture_land_after1997_National$year))
pasture_land_after1997_National$pastureland_all_types <- gsub(",", "", pasture_land_after1997_National$pastureland_all_types)
pasture_land_after1997_National$pastureland_all_types <- as.numeric(as.character(pasture_land_after1997_National$pastureland_all_types))



### COUNTY
pasture_land_after1997 <- readxl::read_xlsx('/Users/sharaakat/Dropbox/akat_shara/DWFI_drought/GitHub/Data/Data/pasture_data_after1997.xlsx') %>% 
  dplyr::select(., State, County, Year, Value) 

pasture_land_after1997 <- rename(pasture_land_after1997, state = State)
pasture_land_after1997 <- rename(pasture_land_after1997, county = County)
pasture_land_after1997 <- rename(pasture_land_after1997, year = Year)
pasture_land_after1997 <- rename(pasture_land_after1997, pastureland_all_types = Value)


pasture_land_before1997 <- readxl::read_xlsx('/Users/sharaakat/Dropbox/akat_shara/DWFI_drought/GitHub/Data/Data/pasture_data_before1997.xlsx')
pasture_land_before1997$year <- as.numeric(as.character(pasture_land_before1997$year))
pasture_land_before1997$pastureland_all_types <- gsub(",", "", pasture_land_before1997$pastureland_all_types)
pasture_land_before1997$pastureland_all_types <- as.numeric(as.character(pasture_land_before1997$pastureland_all_types))


# Join all PASTURELAND data
pasture_data_ALL <- rbind(pasture_land_before1997, pasture_land_after1997)
pasture_data_ALL$year <- as.numeric(as.character(pasture_data_ALL$year))
pasture_data_ALL$pastureland_all_types <- gsub(",", "", pasture_data_ALL$pastureland_all_types)
pasture_data_ALL$pastureland_all_types <- as.numeric(as.character(pasture_data_ALL$pastureland_all_types))
pasture_data_ALL$state <- tolower(pasture_data_ALL$state)
pasture_data_ALL$county <- tolower(pasture_data_ALL$county)


```

### 2. Retrieve USDA NASS cattle inventory data from USDA Census of Agriculture

```{r}

## CATTLE INV - from USDA NASS quickStats
### NATIONAL
beef_inv_after1997_National <- readxl::read_xlsx('/Users/sharaakat/Dropbox/akat_shara/DWFI_drought/GitHub/Data/Data/county_beef_after1997_National.xlsx') %>% 
    dplyr::select(., Year, Value) 

beef_inv_after1997_National <- rename(beef_inv_after1997_National, year = Year)
beef_inv_after1997_National <- rename(beef_inv_after1997_National, beef_inv = Value)
beef_inv_after1997_National$year <- as.numeric(as.character(beef_inv_after1997_National$year))
beef_inv_after1997_National$beef_inv <- gsub(",", "", beef_inv_after1997_National$beef_inv)
beef_inv_after1997_National$beef_inv <- as.numeric(as.character(beef_inv_after1997_National$beef_inv))




### COUNTY
beef_inv_after1997 <- readxl::read_xlsx('/Users/sharaakat/Dropbox/akat_shara/DWFI_drought/GitHub/Data/Data/county_beefinv_after1997.xlsx') %>% 
    dplyr::select(., State, County, Year, Value) 

beef_inv_after1997 <- rename(beef_inv_after1997, state = State)
beef_inv_after1997 <- rename(beef_inv_after1997, county = County)
beef_inv_after1997 <- rename(beef_inv_after1997, year = Year)
beef_inv_after1997 <- rename(beef_inv_after1997, beef_inv = Value)


beef_inv_before1997 <- readxl::read_xlsx('/Users/sharaakat/Dropbox/akat_shara/DWFI_drought/GitHub/Data/Data/county_beefinv_before1997.xlsx')
beef_inv_before1997$year <- as.numeric(as.character(beef_inv_before1997$year))
beef_inv_before1997$beef_inv <- gsub(",", "", beef_inv_before1997$beef_inv)
beef_inv_before1997$beef_inv <- as.numeric(as.character(beef_inv_before1997$beef_inv))


beef_inv <- rbind(beef_inv_before1997, beef_inv_after1997)
beef_inv$year <- as.numeric(as.character(beef_inv$year))
beef_inv$beef_inv <- gsub(",", "", beef_inv$beef_inv)
beef_inv$beef_inv <- as.numeric(as.character(beef_inv$beef_inv))
beef_inv$state <- tolower(beef_inv$state)
beef_inv$county <- tolower(beef_inv$county)


```

### 3. Retrieve hay production data from USDA NASS 

```{r}
## HAY PRODUCTION (lbs) DATA
state_names <- c(
  AL = "Alabama", AK = "Alaska", AZ = "Arizona", AR = "Arkansas", CA = "California", 
  CO = "Colorado", CT = "Connecticut", DE = "Delaware", FL = "Florida", GA = "Georgia", 
  HI = "Hawaii", ID = "Idaho", IL = "Illinois", IN = "Indiana", IA = "Iowa", 
  KS = "Kansas", KY = "Kentucky", LA = "Louisiana", ME = "Maine", MD = "Maryland", 
  MA = "Massachusetts", MI = "Michigan", MN = "Minnesota", MS = "Mississippi", 
  MO = "Missouri", MT = "Montana", NE = "Nebraska", NV = "Nevada", NH = "New Hampshire", 
  NJ = "New Jersey", NM = "New Mexico", NY = "New York", NC = "North Carolina", 
  ND = "North Dakota", OH = "Ohio", OK = "Oklahoma", OR = "Oregon", PA = "Pennsylvania", 
  RI = "Rhode Island", SC = "South Carolina", SD = "South Dakota", TN = "Tennessee", 
  TX = "Texas", UT = "Utah", VT = "Vermont", VA = "Virginia", WA = "Washington", 
  WV = "West Virginia", WI = "Wisconsin", WY = "Wyoming"
)

# All hat stocks, 1000 tones
hay_all_stocks_1000t <- readxl::read_xlsx("/Users/sharaakat/Dropbox/akat_shara/DWFI_drought/GitHub/RobustnessCheck/Data/StateHaySupplies.xlsx", sheet = 2, skip = 2)

hay_all_stocks_1000t_2 <- pivot_longer(hay_all_stocks_1000t, cols = -year, names_to = "state", values_to = "hay_stock_1000t") %>% 
  mutate(state = state_names[state])

hay_all_stocks_1000t_2$state <- tolower(hay_all_stocks_1000t_2$state)

hay_all_stocks_1000t_3 <- hay_all_stocks_1000t_2 %>%
  group_by(state) %>%
  mutate(hay_stock_1000t = dplyr::lead(hay_stock_1000t, n = 1)) %>%
  ungroup() 

hay_all_stocks_1000t_national <- hay_all_stocks_1000t_3 %>% 
  group_by(year) %>% 
  summarize(hay_stock_1000t = mean(hay_stock_1000t, na.rm = TRUE))
```

### 4. Retrieve cattle dressing weights data from USDA NASS

```{r}
dressing_pct <- 0.55
cattle_weight <- readxl::read_xlsx("/Users/sharaakat/Dropbox/akat_shara/DWFI_drought/GitHub/Data/Data/catsltr.xlsx", sheet = 2, skip = 3) %>% 
  dplyr::select(1, 18) %>% 
  `colnames<-`(c("date", "dressed_wt")) %>% 
  dplyr::mutate(live_wt = dressed_wt/dressing_pct,
                year = year(date), month = month(date)) %>% 
  group_by(year) %>% 
  summarize(mean_live_wt = mean(live_wt, na.rm = TRUE))
```

### 5. Retrieve weather data from PRISM

```{r}

# US_counties <- tigris::counties(state = "US", cb = TRUE) %>%
#   st_as_sf()
# 
# # 1981:1991; 1992:2002; 2003:2012; 2013:2020
# month_year_data <- CJ(month = 1:12, year = 2006)
# US_counties_data <- data.table()
# 
# temp_base <- 12  # base temperature for GDD calculation
# temp_up <- 31  # threshold temperature for EDD calculation
# 
# get_saved_PRISM_DT <- function(i, month_year_data, US_counties) {
#   # i = 1
#   temp_year <- month_year_data[i, year]
#   temp_month <- month_year_data[i, month]
# 
#   file_path_ppt <- sprintf("/Volumes/Extreme SSD/UNL/DWFI/data/PRISM_MONTHLY/PRISM_ppt_y%d_m%d.rds", temp_year, temp_month)
#   file_path_tmean <- sprintf("/Volumes/Extreme SSD/UNL/DWFI/data/PRISM_MONTHLY/PRISM_tmean_y%d_m%d.rds", temp_year, temp_month)
#   file_path_tmax <- sprintf("/Volumes/Extreme SSD/UNL/DWFI/data/PRISM_MONTHLY/PRISM_tmax_y%d_m%d.rds", temp_year, temp_month)
#   file_path_tmin <- sprintf("/Volumes/Extreme SSD/UNL/DWFI/data/PRISM_MONTHLY/PRISM_tmin_y%d_m%d.rds", temp_year, temp_month)
# 
#   cat("Year", temp_year, ", month", temp_month, "\n")
# 
#   saved_ppt <- readRDS(file_path_ppt)
#   saved_tmean <- readRDS(file_path_tmean)
#   saved_tmax <- readRDS(file_path_tmax)
#   saved_tmin <- readRDS(file_path_tmin)
# 
#   US_counties_sf <- st_transform(US_counties, st_crs(saved_ppt))
# 
#   a_ppt <- as.data.table(terra::extract(as(saved_ppt, "SpatRaster"), vect(US_counties_sf)))
#   a_tmean <- as.data.table(terra::extract(as(saved_tmean, "SpatRaster"), vect(US_counties_sf)))
#   a_tmax <- as.data.table(terra::extract(as(saved_tmax, "SpatRaster"), vect(US_counties_sf)))
#   a_tmin <- as.data.table(terra::extract(as(saved_tmin, "SpatRaster"), vect(US_counties_sf)))
# 
#   a_ppt_long <- melt(a_ppt, id.vars = "ID", variable.name = "Date", value.name = "ppt") %>%
#     .[, .(ppt = mean(ppt, na.rm = TRUE)), by = .(ID, Date)]
# 
#   # a_ppt_long <- melt(setDT(a_ppt), id.vars = "ID", variable.name = "Date", value.name = "ppt")[,
#   #      .(ppt = mean(ppt, na.rm = TRUE)), by = .(ID, Date)]
# 
#   a_tmean_long <- melt(a_tmean, id.vars = "ID", variable.name = "Date", value.name = "tmean") %>%
#     .[, .(tmean = mean(tmean, na.rm = TRUE)), by = .(ID, Date)]
#   a_tmax_long <- melt(a_tmax, id.vars = "ID", variable.name = "Date", value.name = "tmax") %>%
#     .[, .(tmax = mean(tmax, na.rm = TRUE)), by = .(ID, Date)]
#   a_tmin_long <- melt(a_tmin, id.vars = "ID", variable.name = "Date", value.name = "tmin") %>%
#     .[, .(tmin = mean(tmin, na.rm = TRUE)), by = .(ID, Date)]
# 
#   setkey(a_ppt_long, ID, Date)
#   setkey(a_tmean_long, ID, Date)
#   setkey(a_tmax_long, ID, Date)
#   setkey(a_tmin_long, ID, Date)
# 
#   # Joining the data.tables
#   a_long <- merge(a_ppt_long, a_tmean_long, by = c("ID", "Date"), all = TRUE)
#   a_long <- merge(a_long, a_tmax_long, by = c("ID", "Date"), all = TRUE)
#   a_long <- merge(a_long, a_tmin_long, by = c("ID", "Date"), all = TRUE)
# 
#   a_long[, Date := as.Date(gsub("date", "", Date))]
#   a_long[, `:=`(month = month(Date), year = year(Date))]
# 
#   US_counties_v_1 <- st_as_sf(vect(US_counties_sf)) %>%
#     mutate(ID = seq_len(nrow(.))) %>%
#     as.data.table()
# 
#   US_counties_v_1 <- merge(US_counties_v_1, a_long, by = "ID", all.x = TRUE)
#   US_counties_v_1 <- US_counties_v_1[, .(
#     tmin = mean(tmin, na.rm = TRUE),
#     tmax = mean(tmax, na.rm = TRUE),
#     tmean = mean(tmean, na.rm = TRUE),
#     ppt = sum(ppt, na.rm = TRUE)
#   ), by = .(year, month, NAME, STATE_NAME)]
# 
# 
#   US_counties_v_1[, month_heat_index := (tmean / 5) ^ 1.514]
# 
#   US_counties_v_2 <- US_counties_v_1[, .(annual_heat_index = sum(month_heat_index, na.rm = TRUE)), by = .(year, NAME, STATE_NAME)]
#   US_counties_v_2[, a := 675 * 10^(-9) * annual_heat_index^3 - 771 * 10^(-7) * annual_heat_index^2 + 1792 * 10^(-5) * annual_heat_index + 0.49239]
# 
#   joined_weather_SPEI <- merge(US_counties_v_1, US_counties_v_2, by = c("year", "NAME", "STATE_NAME"), all.x = TRUE)
#   joined_weather_SPEI[, PET := ifelse(tmean <= 0, 0, 16 * ((10 * tmean) / annual_heat_index) ^ a)]
#   joined_weather_SPEI[, D := ppt - PET]
# 
#   joined_weather_SPEI[, Tavg := (tmax + tmin) / 2]
#   joined_weather_SPEI[, GDD := fifelse(Tavg < temp_base, 0,
#                                        fifelse(Tavg > temp_up, temp_up - temp_base,
#                                                Tavg - temp_base))]
# 
#   joined_weather_SPEI[, EDD := fifelse(tmax > temp_up, tmax - temp_up, 0)]
# 
#   joined_weather <- joined_weather_SPEI[, .(
#     avg_tmin = tmin,
#     avg_tmax = tmax,
#     avg_tmean = tmean,
#     sum_ppt = ppt,
#     monthly_D = sum(D, na.rm = TRUE),
#     monthly_GDD = sum(GDD, na.rm = TRUE),
#     monthly_EDD = sum(EDD, na.rm = TRUE)
#   ), by = .(year, month, NAME, STATE_NAME)]
# 
#   return(joined_weather)
# }
# 
# merged_data_1981_2020 <- data.frame()
# merged_data_1981_2020 <- lapply(
#   1:nrow(month_year_data),
#   function(x) get_saved_PRISM_DT(x, month_year_data, US_counties)
# )
# 
# combined_1981_2020 <- do.call(rbind, merged_data_1981_2020)
# 
# saveRDS(
#   combined_1981_2020,
#   paste0("/Volumes/Extreme SSD/UNL/DWFI /data/PRISM_MONTHLY_COMBINED_10_31/", "combined_1981_2020.rds")
# )

drought_final <- readRDS("/Users/sharaakat/Dropbox/akat_shara/DWFI_drought/GitHub/RobustnessCheck/Data/combined_1981_2020_NEW.rds")

growing_season_data <- drought_final %>%
  filter(month >= 3 & month <= 10)  # Select only March to October

# Aggregate to yearly level
yearly_drought_data <- growing_season_data %>%
  group_by(year, STATE_NAME, NAME) %>%  # Group by year, state, and county
  summarize(
    total_D = sum(D, na.rm = TRUE),  # Total drought index
    total_GDD = sum(GDD, na.rm = TRUE),  # Total Growing Degree Days
    total_EDD = sum(EDD, na.rm = TRUE)  # Total Extreme Degree Days
  ) %>% 
  rename(state = STATE_NAME,
         county = NAME) %>% 
  dplyr::select(year, state, county, total_D, total_GDD, total_EDD)

yearly_drought_data$state <- tolower(yearly_drought_data$state)
yearly_drought_data$county <- tolower(yearly_drought_data$county)

```

### 6. Retrieve Climate projections data from MACA

```{r}

# 1. Functino to estimate weather variables:

process_cmip6_data <- function(tmax_file, tmin_file, pr_file, scenario, temp_base = 12, temp_up = 31) {

  # Rotate to ensure correct alignment
  pr_raster <- terra::rotate(pr_file)
  tmin_raster <- terra::rotate(tmin_file)
  tmax_raster <- terra::rotate(tmax_file)
  
  # Set CRS to WGS84 explicitly
  crs(pr_raster) <- "EPSG:4326"
  crs(tmin_raster) <- "EPSG:4326"
  crs(tmax_raster) <- "EPSG:4326"
  
  # Assign time-based names to layers
  names(pr_raster) <- time(pr_raster)
  names(tmin_raster) <- time(tmin_raster)
  names(tmax_raster) <- time(tmax_raster)
  
  # Load US counties
  US_counties <- tigris::counties(state = "US", cb = TRUE) %>% st_as_sf()
  US_counties_sf <- st_transform(US_counties, crs(pr_raster))
  
  # Extract data
  pr_data <- as.data.table(terra::extract(pr_raster, vect(US_counties_sf)))
  tmin_data <- as.data.table(terra::extract(tmin_raster, vect(US_counties_sf)))
  tmax_data <- as.data.table(terra::extract(tmax_raster, vect(US_counties_sf)))
  
  # Reshape and aggregate data
  pr_data_ID <- melt(pr_data, id.vars = "ID", variable.name = "Date", value.name = "ppt") %>%
    .[, .(ppt = mean(ppt, na.rm = TRUE)), by = .(ID, Date)]
  pr_data_ID[, ppt := ppt * 86400]  # Convert to daily precipitation
  
  tmin_data_ID <- melt(tmin_data, id.vars = "ID", variable.name = "Date", value.name = "tmin") %>%
    .[, .(tmin = mean(tmin, na.rm = TRUE)), by = .(ID, Date)]
  
  tmax_data_ID <- melt(tmax_data, id.vars = "ID", variable.name = "Date", value.name = "tmax") %>%
    .[, .(tmax = mean(tmax, na.rm = TRUE)), by = .(ID, Date)]
  
  setkey(pr_data_ID, ID, Date)
  setkey(tmin_data_ID, ID, Date)
  setkey(tmax_data_ID, ID, Date)
  
  # Merge datasets
  weather_data <- merge(pr_data_ID, tmin_data_ID, by = c("ID", "Date"), all = TRUE)
  weather_data <- merge(weather_data, tmax_data_ID, by = c("ID", "Date"), all = TRUE)
  
  # Add year and month columns
  weather_data[, year := year(Date)]
  weather_data[, month := month(Date)]
  
  US_counties_v_1 <- st_as_sf(vect(US_counties_sf)) %>%
    mutate(ID = seq_len(nrow(.))) %>%
    as.data.table()
  
  US_counties_v_1 <- merge(US_counties_v_1, weather_data, by = "ID", all.x = TRUE)
  
  US_counties_v_1[, tmax := tmax - 273.15]
  US_counties_v_1[, tmin := tmin - 273.15]
  
  US_counties_v_1[, Tavg := (tmax + tmin) / 2]
  US_counties_v_1[, daily_heat_index := (Tavg / 5) ^ 1.514]
  
  # US_counties_v_2 <- US_counties_v_1[, .(annual_heat_index = sum(month_heat_index, na.rm = TRUE)), by = .(year, NAME, STATE_NAME)]
  US_counties_v2 <- US_counties_v_1[, .(
    monthly_ppt = sum(ppt, na.rm = TRUE),  # Sum daily precipitation for monthly totals
    monthly_tmin = mean(tmin, na.rm = TRUE),  # Sum daily precipitation for monthly totals
    monthly_tmax = mean(tmax, na.rm = TRUE),  # Sum daily precipitation for monthly totals
    monthly_heat_index = sum(daily_heat_index, na.rm = TRUE),
    Tavg = mean(Tavg, na.rm = TRUE)
  ), by = .(year, month, NAME, STATE_NAME)]
  
  US_counties_annual <- US_counties_v2[, .(
    annual_heat_index = sum(monthly_heat_index, na.rm = TRUE)
  ), by = .(year, NAME, STATE_NAME)]
  
  US_counties_v_2 <-  merge(US_counties_v2, US_counties_annual, by = c("year", "NAME", "STATE_NAME"), all.x = TRUE)
  
  US_counties_v_2[, a := 675 * 10^(-9) * annual_heat_index^3 - 771 * 10^(-7) * annual_heat_index^2 + 1792 * 10^(-5) * annual_heat_index + 0.49239]
  
  # joined_weather_SPEI <- merge(US_counties_v_1, US_counties_v_2, by = c("year", "NAME", "STATE_NAME"), all.x = TRUE)
  US_counties_v_2[, PET := ifelse(Tavg <= 0, 0, 16 * ((10 * Tavg) / annual_heat_index) ^ a)]
  US_counties_v_2[, D := monthly_ppt - PET]
  
  # joined_weather_SPEI[, Tavg := (tmax + tmin) / 2]
  US_counties_v_2[, GDD := fifelse(Tavg < temp_base, 0,
                                   fifelse(Tavg > temp_up, temp_up - temp_base,
                                           Tavg - temp_base))]
  
  US_counties_v_2[, EDD := fifelse(monthly_tmax > temp_up, monthly_tmax - temp_up, 0)]
  
   if (scenario == "8.5") {
        US_counties_v_2[, GDD := GDD - 0.5 * EDD]  } # Adjust GDD by subtracting EDD for RCP 8.5

  joined_weather <- US_counties_v_2[, .(
    monthly_D = sum(D, na.rm = TRUE),
    monthly_GDD = sum(GDD, na.rm = TRUE),
    monthly_EDD = sum(EDD, na.rm = TRUE)
  ), by = .(year, month, NAME, STATE_NAME)]
  
  
  return(joined_weather)
}


# 2. Function to run through all realizations
process_cmip6_realization <- function(realization, base_dir, output_dir, temp_base = 12, temp_up = 31) {
  
  # Construct file paths dynamically based on realization number
  tmax_4.5 <- rast(file.path(base_dir, sprintf("r%02d/tasmax_Amon_CanESM5_rcp45-cmip5_r%di1p1f1_gn_200601-210012.nc", realization, realization)))
  tmin_4.5 <- rast(file.path(base_dir, sprintf("r%02d/tasmin_Amon_CanESM5_rcp45-cmip5_r%di1p1f1_gn_200601-210012.nc", realization, realization)))
  pr_4.5   <- rast(file.path(base_dir, sprintf("r%02d/pr_Amon_CanESM5_rcp45-cmip5_r%di1p1f1_gn_200601-210012.nc", realization, realization)))

  tmax_8.5 <- rast(file.path(base_dir, sprintf("r%02d/tasmax_Amon_CanESM5_rcp85-cmip5_r%di1p1f1_gn_200601-210012.nc", realization, realization)))
  tmin_8.5 <- rast(file.path(base_dir, sprintf("r%02d/tasmin_Amon_CanESM5_rcp85-cmip5_r%di1p1f1_gn_200601-210012.nc", realization, realization)))
  pr_8.5   <- rast(file.path(base_dir, sprintf("r%02d/pr_Amon_CanESM5_rcp85-cmip5_r%di1p1f1_gn_200601-210012.nc", realization, realization)))

  # Process CMIP6 data for each scenario
  file_45 <- process_cmip6_data(tmax_4.5, tmin_4.5, pr_4.5, "4.5", temp_base, temp_up)
  file_85 <- process_cmip6_data(tmax_8.5, tmin_8.5, pr_8.5, "8.5", temp_base, temp_up)

  # Save results with realization number
  saveRDS(file_45, file.path(output_dir, sprintf("Weather_r%02d_4.5.rds", realization)))
  saveRDS(file_85, file.path(output_dir, sprintf("Weather_r%02d_8.5.rds", realization)))

  cat(sprintf("Processed and saved results for realization r%02d\n", realization))
}

# Example Usage: Run for multiple realizations
base_dir <- "/Volumes/Extreme SSD/UNL/DWFI/Drought/data/Climate_Projection_2"
output_dir <- "/Volumes/Extreme SSD/UNL/DWFI/Drought/data/Climate_Projection_2"

# Run the function for realizations 1 through 10
for (realization in 1:10) {
  process_cmip6_realization(realization, base_dir, output_dir)
}


```
